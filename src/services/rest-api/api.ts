/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DocumentsReq
 */
export interface DocumentsReq {
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    docType?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    employeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    file?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    fileName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocumentsReq
     */
    fileStatus?: boolean;
    /**
     * 
     * @type {ObjectId}
     * @memberof DocumentsReq
     */
    id?: ObjectId;
}
/**
 * 
 * @export
 * @interface DocumentsRes
 */
export interface DocumentsRes {
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    docType?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    employeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    file?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    fileName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocumentsRes
     */
    fileStatus?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface EmployeeReq
 */
export interface EmployeeReq {
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    agency?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    birthDate?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    currentAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    homeAddress?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof EmployeeReq
     */
    id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    position?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmployeeReq
     */
    session?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface EmployeeRes
 */
export interface EmployeeRes {
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    agency?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    birthDate?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    currentAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    homeAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    position?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmployeeRes
     */
    session?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface ObjectId
 */
export interface ObjectId {
    /**
     * 
     * @type {number}
     * @memberof ObjectId
     */
    timestamp?: number;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof Resource
     */
    file?: any;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    filename?: string;
    /**
     * 
     * @type {object}
     * @memberof Resource
     */
    inputStream?: object;
    /**
     * 
     * @type {boolean}
     * @memberof Resource
     */
    open?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Resource
     */
    readable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    uri?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * 
     * @type {string}
     * @memberof UploadFileResponse
     */
    fileDownloadUri?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileResponse
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileResponse
     */
    fileType?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFileResponse
     */
    size?: number;
}

/**
 * DocumentControllerApi - axios parameter creator
 * @export
 */
export const DocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insert some employee documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeDocument: async (model: DocumentsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('addEmployeeDocument', 'model', model)
            const localVarPath = `/kathanor-api/document/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsingDELETE', 'id', id)
            const localVarPath = `/kathanor-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocument', 'id', id)
            const localVarPath = `/kathanor-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/document/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update this document
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument: async (id: string, model: DocumentsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDocument', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateDocument', 'model', model)
            const localVarPath = `/kathanor-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument: async (id: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadDocument', 'id', id)
            const localVarPath = `/kathanor-api/document/upload/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentControllerApi - functional programming interface
 * @export
 */
export const DocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insert some employee documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeDocument(model: DocumentsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeDocument(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocuments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocumentsRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocuments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update this document
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocument(id: string, model: DocumentsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocument(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocument(id: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocument(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentControllerApi - factory interface
 * @export
 */
export const DocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Insert some employee documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeDocument(model: DocumentsReq, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.addEmployeeDocument(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(id: string, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.getDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(options?: any): AxiosPromise<Array<DocumentsRes>> {
            return localVarFp.getDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update this document
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(id: string, model: DocumentsReq, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.updateDocument(id, model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(id: string, file?: any, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.uploadDocument(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentControllerApi - object-oriented interface
 * @export
 * @class DocumentControllerApi
 * @extends {BaseAPI}
 */
export class DocumentControllerApi extends BaseAPI {
    /**
     * 
     * @summary Insert some employee documents
     * @param {DocumentsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public addEmployeeDocument(model: DocumentsReq, options?: any) {
        return DocumentControllerApiFp(this.configuration).addEmployeeDocument(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public deleteUsingDELETE(id: string, options?: any) {
        return DocumentControllerApiFp(this.configuration).deleteUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get document by id
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocument(id: string, options?: any) {
        return DocumentControllerApiFp(this.configuration).getDocument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocuments(options?: any) {
        return DocumentControllerApiFp(this.configuration).getDocuments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update this document
     * @param {string} id id
     * @param {DocumentsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public updateDocument(id: string, model: DocumentsReq, options?: any) {
        return DocumentControllerApiFp(this.configuration).updateDocument(id, model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload some documents
     * @param {string} id id
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public uploadDocument(id: string, file?: any, options?: any) {
        return DocumentControllerApiFp(this.configuration).uploadDocument(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmployeeControllersApi - axios parameter creator
 * @export
 */
export const EmployeeControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployee: async (model: EmployeeReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('addEmployee', 'model', model)
            const localVarPath = `/kathanor-api/employee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmployee', 'id', id)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/employee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeById', 'id', id)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (id: string, model: EmployeeReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployee', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateEmployee', 'model', model)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeControllersApi - functional programming interface
 * @export
 */
export const EmployeeControllersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeControllersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployee(model: EmployeeReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployee(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployee(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(id: string, model: EmployeeReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeControllersApi - factory interface
 * @export
 */
export const EmployeeControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeControllersApiFp(configuration)
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployee(model: EmployeeReq, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.addEmployee(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmployee(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(options?: any): AxiosPromise<Array<EmployeeRes>> {
            return localVarFp.getEmployee(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById(id: string, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.getEmployeeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(id: string, model: EmployeeReq, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.updateEmployee(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeControllersApi - object-oriented interface
 * @export
 * @class EmployeeControllersApi
 * @extends {BaseAPI}
 */
export class EmployeeControllersApi extends BaseAPI {
    /**
     * 
     * @summary Insert some employee account
     * @param {EmployeeReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public addEmployee(model: EmployeeReq, options?: any) {
        return EmployeeControllersApiFp(this.configuration).addEmployee(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete this employee account
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public deleteEmployee(id: string, options?: any) {
        return EmployeeControllersApiFp(this.configuration).deleteEmployee(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all employee account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public getEmployee(options?: any) {
        return EmployeeControllersApiFp(this.configuration).getEmployee(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee account by id
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public getEmployeeById(id: string, options?: any) {
        return EmployeeControllersApiFp(this.configuration).getEmployeeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update this employee account
     * @param {string} id id
     * @param {EmployeeReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public updateEmployee(id: string, model: EmployeeReq, options?: any) {
        return EmployeeControllersApiFp(this.configuration).updateEmployee(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileControllerApi - axios parameter creator
 * @export
 */
export const FileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} fileName fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (fileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('downloadFile', 'fileName', fileName)
            const localVarPath = `/kathanor-api/file/downloadFile/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload one file
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (file?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/file/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileControllerApi - functional programming interface
 * @export
 */
export const FileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} fileName fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(fileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload one file
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileControllerApi - factory interface
 * @export
 */
export const FileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} fileName fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(fileName: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.downloadFile(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload one file
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file?: any, options?: any): AxiosPromise<UploadFileResponse> {
            return localVarFp.uploadFile(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileControllerApi - object-oriented interface
 * @export
 * @class FileControllerApi
 * @extends {BaseAPI}
 */
export class FileControllerApi extends BaseAPI {
    /**
     * 
     * @summary Download file by file name
     * @param {string} fileName fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFile(fileName: string, options?: any) {
        return FileControllerApiFp(this.configuration).downloadFile(fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload one file
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public uploadFile(file?: any, options?: any) {
        return FileControllerApiFp(this.configuration).uploadFile(file, options).then((request) => request(this.axios, this.basePath));
    }
}



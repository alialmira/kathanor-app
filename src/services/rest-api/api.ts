/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Binary
 */
export interface Binary {
    /**
     * 
     * @type {string}
     * @memberof Binary
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof Binary
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface ContentReq
 */
export interface ContentReq {
    /**
     * 
     * @type {string}
     * @memberof ContentReq
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentReq
     */
    contentType?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof ContentReq
     */
    id?: ObjectId;
}
/**
 * 
 * @export
 * @interface ContentRes
 */
export interface ContentRes {
    /**
     * 
     * @type {string}
     * @memberof ContentRes
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentRes
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentRes
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface EmployeeReq
 */
export interface EmployeeReq {
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    accountType?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    agency?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    birthDate?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    birthPlace?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    currentAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    extensionName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    homeAddress?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof EmployeeReq
     */
    id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    position?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmployeeReq
     */
    session?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployeeReq
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface EmployeeRes
 */
export interface EmployeeRes {
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    accountType?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    agency?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    birthDate?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    birthPlace?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    currentAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    extensionName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    homeAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    position?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmployeeRes
     */
    session?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRes
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface File201
 */
export interface File201 {
    /**
     * 
     * @type {Binary}
     * @memberof File201
     */
    content?: Binary;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    dateUploaded?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    docType?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    employeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    filename?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof File201
     */
    uploadedBy?: string;
}
/**
 * 
 * @export
 * @interface ObjectId
 */
export interface ObjectId {
    /**
     * 
     * @type {number}
     * @memberof ObjectId
     */
    timestamp?: number;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof Resource
     */
    file?: any;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    filename?: string;
    /**
     * 
     * @type {object}
     * @memberof Resource
     */
    inputStream?: object;
    /**
     * 
     * @type {boolean}
     * @memberof Resource
     */
    open?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Resource
     */
    readable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    uri?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    url?: string;
}

/**
 * ContentControllersApi - axios parameter creator
 * @export
 */
export const ContentControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insert dashboard content
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent: async (model: ContentReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('addContent', 'model', model)
            const localVarPath = `/kathanor-api/content/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all dashboard content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/content/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get content by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContentById', 'id', id)
            const localVarPath = `/kathanor-api/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update dashboard content
         * @param {string} id id
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContent: async (id: string, model: ContentReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContent', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateContent', 'model', model)
            const localVarPath = `/kathanor-api/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentControllersApi - functional programming interface
 * @export
 */
export const ContentControllersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentControllersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insert dashboard content
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContent(model: ContentReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContent(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all dashboard content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContent(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContentRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get content by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update dashboard content
         * @param {string} id id
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContent(id: string, model: ContentReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContent(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentControllersApi - factory interface
 * @export
 */
export const ContentControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentControllersApiFp(configuration)
    return {
        /**
         * 
         * @summary Insert dashboard content
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent(model: ContentReq, options?: any): AxiosPromise<ContentRes> {
            return localVarFp.addContent(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all dashboard content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent(options?: any): AxiosPromise<Array<ContentRes>> {
            return localVarFp.getContent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get content by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById(id: string, options?: any): AxiosPromise<ContentRes> {
            return localVarFp.getContentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update dashboard content
         * @param {string} id id
         * @param {ContentReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContent(id: string, model: ContentReq, options?: any): AxiosPromise<ContentRes> {
            return localVarFp.updateContent(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentControllersApi - object-oriented interface
 * @export
 * @class ContentControllersApi
 * @extends {BaseAPI}
 */
export class ContentControllersApi extends BaseAPI {
    /**
     * 
     * @summary Insert dashboard content
     * @param {ContentReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentControllersApi
     */
    public addContent(model: ContentReq, options?: any) {
        return ContentControllersApiFp(this.configuration).addContent(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all dashboard content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentControllersApi
     */
    public getContent(options?: any) {
        return ContentControllersApiFp(this.configuration).getContent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get content by id
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentControllersApi
     */
    public getContentById(id: string, options?: any) {
        return ContentControllersApiFp(this.configuration).getContentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update dashboard content
     * @param {string} id id
     * @param {ContentReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentControllersApi
     */
    public updateContent(id: string, model: ContentReq, options?: any) {
        return ContentControllersApiFp(this.configuration).updateContent(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmployeeControllersApi - axios parameter creator
 * @export
 */
export const EmployeeControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployee: async (model: EmployeeReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('addEmployee', 'model', model)
            const localVarPath = `/kathanor-api/employee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmployee', 'id', id)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/employee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeById', 'id', id)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (id: string, model: EmployeeReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployee', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateEmployee', 'model', model)
            const localVarPath = `/kathanor-api/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeControllersApi - functional programming interface
 * @export
 */
export const EmployeeControllersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeControllersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployee(model: EmployeeReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployee(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployee(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(id: string, model: EmployeeReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeControllersApi - factory interface
 * @export
 */
export const EmployeeControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeControllersApiFp(configuration)
    return {
        /**
         * 
         * @summary Insert some employee account
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployee(model: EmployeeReq, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.addEmployee(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete this employee account
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmployee(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all employee account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(options?: any): AxiosPromise<Array<EmployeeRes>> {
            return localVarFp.getEmployee(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee account by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById(id: string, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.getEmployeeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update this employee account
         * @param {string} id id
         * @param {EmployeeReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(id: string, model: EmployeeReq, options?: any): AxiosPromise<EmployeeRes> {
            return localVarFp.updateEmployee(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeControllersApi - object-oriented interface
 * @export
 * @class EmployeeControllersApi
 * @extends {BaseAPI}
 */
export class EmployeeControllersApi extends BaseAPI {
    /**
     * 
     * @summary Insert some employee account
     * @param {EmployeeReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public addEmployee(model: EmployeeReq, options?: any) {
        return EmployeeControllersApiFp(this.configuration).addEmployee(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete this employee account
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public deleteEmployee(id: string, options?: any) {
        return EmployeeControllersApiFp(this.configuration).deleteEmployee(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all employee account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public getEmployee(options?: any) {
        return EmployeeControllersApiFp(this.configuration).getEmployee(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee account by id
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public getEmployeeById(id: string, options?: any) {
        return EmployeeControllersApiFp(this.configuration).getEmployeeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update this employee account
     * @param {string} id id
     * @param {EmployeeReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllersApi
     */
    public updateEmployee(id: string, model: EmployeeReq, options?: any) {
        return EmployeeControllersApiFp(this.configuration).updateEmployee(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * File201ControllersApi - axios parameter creator
 * @export
 */
export const File201ControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadFile', 'id', id)
            const localVarPath = `/kathanor-api/201file/downloadFile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all 201 files of employee
         * @param {string} empId empId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get201Files: async (empId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'empId' is not null or undefined
            assertParamExists('get201Files', 'empId', empId)
            const localVarPath = `/kathanor-api/201file/{empId}`
                .replace(`{${"empId"}}`, encodeURIComponent(String(empId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all 201 File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll201Files: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kathanor-api/201file/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload 201 file
         * @param {string} dateUploaded dateUploaded
         * @param {string} docType docType
         * @param {string} employeeId employeeId
         * @param {string} uploadedBy uploadedBy
         * @param {any} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload201File: async (dateUploaded: string, docType: string, employeeId: string, uploadedBy: string, content?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dateUploaded' is not null or undefined
            assertParamExists('upload201File', 'dateUploaded', dateUploaded)
            // verify required parameter 'docType' is not null or undefined
            assertParamExists('upload201File', 'docType', docType)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('upload201File', 'employeeId', employeeId)
            // verify required parameter 'uploadedBy' is not null or undefined
            assertParamExists('upload201File', 'uploadedBy', uploadedBy)
            const localVarPath = `/kathanor-api/201file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (dateUploaded !== undefined) {
                localVarQueryParameter['dateUploaded'] = dateUploaded;
            }

            if (docType !== undefined) {
                localVarQueryParameter['docType'] = docType;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (uploadedBy !== undefined) {
                localVarQueryParameter['uploadedBy'] = uploadedBy;
            }


            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * File201ControllersApi - functional programming interface
 * @export
 */
export const File201ControllersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = File201ControllersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all 201 files of employee
         * @param {string} empId empId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get201Files(empId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<File201>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get201Files(empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all 201 File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll201Files(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<File201>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll201Files(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload 201 file
         * @param {string} dateUploaded dateUploaded
         * @param {string} docType docType
         * @param {string} employeeId employeeId
         * @param {string} uploadedBy uploadedBy
         * @param {any} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload201File(dateUploaded: string, docType: string, employeeId: string, uploadedBy: string, content?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload201File(dateUploaded, docType, employeeId, uploadedBy, content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * File201ControllersApi - factory interface
 * @export
 */
export const File201ControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = File201ControllersApiFp(configuration)
    return {
        /**
         * 
         * @summary Download file by file name
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(id: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.downloadFile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all 201 files of employee
         * @param {string} empId empId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get201Files(empId: string, options?: any): AxiosPromise<Array<File201>> {
            return localVarFp.get201Files(empId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all 201 File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll201Files(options?: any): AxiosPromise<Array<File201>> {
            return localVarFp.getAll201Files(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload 201 file
         * @param {string} dateUploaded dateUploaded
         * @param {string} docType docType
         * @param {string} employeeId employeeId
         * @param {string} uploadedBy uploadedBy
         * @param {any} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload201File(dateUploaded: string, docType: string, employeeId: string, uploadedBy: string, content?: any, options?: any): AxiosPromise<string> {
            return localVarFp.upload201File(dateUploaded, docType, employeeId, uploadedBy, content, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * File201ControllersApi - object-oriented interface
 * @export
 * @class File201ControllersApi
 * @extends {BaseAPI}
 */
export class File201ControllersApi extends BaseAPI {
    /**
     * 
     * @summary Download file by file name
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof File201ControllersApi
     */
    public downloadFile(id: string, options?: any) {
        return File201ControllersApiFp(this.configuration).downloadFile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all 201 files of employee
     * @param {string} empId empId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof File201ControllersApi
     */
    public get201Files(empId: string, options?: any) {
        return File201ControllersApiFp(this.configuration).get201Files(empId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all 201 File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof File201ControllersApi
     */
    public getAll201Files(options?: any) {
        return File201ControllersApiFp(this.configuration).getAll201Files(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload 201 file
     * @param {string} dateUploaded dateUploaded
     * @param {string} docType docType
     * @param {string} employeeId employeeId
     * @param {string} uploadedBy uploadedBy
     * @param {any} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof File201ControllersApi
     */
    public upload201File(dateUploaded: string, docType: string, employeeId: string, uploadedBy: string, content?: any, options?: any) {
        return File201ControllersApiFp(this.configuration).upload201File(dateUploaded, docType, employeeId, uploadedBy, content, options).then((request) => request(this.axios, this.basePath));
    }
}


